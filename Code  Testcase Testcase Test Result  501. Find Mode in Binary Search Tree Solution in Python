# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        def inorder(node):
            nonlocal max_count, current_count, current_val, modes

            if node is None:
                return

            inorder(node.left)

            # Check if the current value is the same as the previous one
            if node.val == current_val:
                current_count += 1
            else:
                current_val = node.val
                current_count = 1

            # Update the mode(s) based on the current count
            if current_count > max_count:
                max_count = current_count
                modes = [current_val]
            elif current_count == max_count:
                modes.append(current_val)

            inorder(node.right)

        max_count = 0
        current_count = 0
        current_val = None
        modes = []

        inorder(root)

        return modes
            
